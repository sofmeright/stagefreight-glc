update_release_pipeline_status_badge:
  stage: release
  image: alpine:3.22.1
  only: [tags]
  needs: [create-release]
  script:
    - apk add --no-cache curl jq bash coreutils
    - JOB_STATUSES=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/jobs" | jq -r '.[].status')
    - |
      ALL_SUCCESS=true
      ANY_FAILED=false
      for status in $JOB_STATUSES; do
        case "$status" in
          failed) ANY_FAILED=true; ALL_SUCCESS=false;;
          running|pending) ALL_SUCCESS=false;;
        esac
      done
      if [ "$ALL_SUCCESS" = true ]; then
        STATUS="passed"; COLOR="#4c1"
      elif [ "$ANY_FAILED" = true ]; then
        STATUS="failed"; COLOR="#e05d44"
      else
        STATUS="running"; COLOR="#dfb317"
      fi
    - mkdir -p assets
    - sed -e "s|{{COLOR}}|$COLOR|g" -e "s|{{STATUS}}|$STATUS|g" "$[[ inputs.badge_template ]]" > "$[[ inputs.badge_output ]]"
    - CONTENT_BASE64=$(base64 -w 0 "$[[ inputs.badge_output ]]")
    - ENCODED_FILE_PATH=$(printf '%s' "$[[ inputs.badge_output ]]" | jq -s -R -r @uri)
    - >
      curl --request PUT --header "PRIVATE-TOKEN: $GITLAB_TOKEN"
      --header "Content-Type: application/json"
      --data "{
        \"branch\": \"$[[ inputs.branch_name ]]\",
        \"content\": \"$CONTENT_BASE64\",
        \"commit_message\": \"Update release badge for $CI_COMMIT_TAG\",
        \"encoding\": \"base64\"
      }"
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/files/$ENCODED_FILE_PATH"
  artifacts:
    paths: ["$[[ inputs.badge_output ]]"]
    expire_in: 1 hour