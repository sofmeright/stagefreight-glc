spec:
  inputs:
    docker_hub_user:
      description: "Docker Hub username for image publishing"
    docker_hub_pass:
      description: "Docker Hub password or token for authentication"
    docker_image:
      description: "Docker image name"
      default: "prplanit/stagefreight"
    docker_tag:
      description: "Docker tag to use (usually CI_COMMIT_TAG)"
      default: "$CI_COMMIT_TAG"
    gitlab_domain:
      description: "GitLab domain"
      default: "https://gitlab.prplanit.com"
    gitlab_token:
      default: ''
      description: 'Token for authenticating GitLab API calls.'
    badge-release-status_output:
      description: 'Path to store "badge-release_status.svg" within parent pipelines repo.'
      default: "assets/badge-release_status.svg"
  _input_metadata:
    docker_hub_user:
      _input_group_name: Ansible Config
      _input_group_desc: ''
    docker_hub_pass:
      _input_group_name: Ansible Config
      _input_group_desc: ''
    docker_image:
      _input_group_name: Ansible Config
      _input_group_desc: ''
    docker_tag:
      _input_group_name: Ansible Config
      _input_group_desc: ''
    gitlab_domain:
      _input_group_name: Ansible Config
      _input_group_desc: ''
    gitlab_token:
      _input_group_name: Ansible Config
      _input_group_desc: ''
    badge-release-status_output:
      _input_group_name: Ansible Config
      _input_group_desc: ''


---
# Begin CI pipeline jobs
stages:
  - build
  - release

variables:
  BADGE_RELEASE_STATS_OUT: "$[[ inputs.badge-release-status_output ]]"
  DOCKER_HUB_USERNAME: "$[[ inputs.docker_hub_user ]]"
  DOCKER_HUB_PASSWORD: "$[[ inputs.docker_hub_pass ]]"
  DOCKER_IMAGE: "$[[ inputs.docker_image ]]"
  DOCKER_TAG: "$[[ inputs.docker_tag ]]"
  GITLAB_DOMAIN: "$[[ inputs.gitlab_domain ]]"
  GITLAB_TOKEN: $[[ inputs.gitlab_token ]]

  DOCKER_HOST: "tcp://docker:2376"
  DOCKER_TLS_VERIFY: "1"
  DOCKER_CERT_PATH: "/certs/client"
  DOCKER_TLS_CERTDIR: "/certs"
  DOCKER_TAG: "$CI_COMMIT_TAG"
  GIT_TAG: "$CI_COMMIT_TAG"


build-image:
  stage: build
  image: docker:24.0.5
  services:
    - name: docker:24.0.5-dind
      alias: docker
  before_script:
    - apk add --no-cache bash git
  script:
    - docker build -t "$DOCKER_IMAGE:$DOCKER_TAG" .
    - echo "$DOCKER_HUB_PASSWORD" | docker login -u "$DOCKER_HUB_USERNAME" --password-stdin
    - docker push "$DOCKER_IMAGE:$DOCKER_TAG"
    - docker tag "$DOCKER_IMAGE:$DOCKER_TAG" "$DOCKER_IMAGE:latest"
    - docker push "$DOCKER_IMAGE:latest"
  rules:
    - if: $CI_COMMIT_TAG

generate_release_notes:
  stage: release
  image: alpine:3.22.1
  only: [tags]
  artifacts:
    paths: 
      - release.md
      - assets/
      - scripts/
    expire_in: 1 hour
  only:
    - tags
  before_script:
    - apk add --no-cache bash curl git
    - echo "Listing files for debugging"
    - find . -type f
    - cat ./scripts/gitlab/generate-release_notes.sh
    - chmod +x scripts/gitlab/generate-release_notes.sh
  script:
    - scripts/gitlab/generate-release_notes.sh > release.md
    - test -s release.md || (echo "❌ release.md is empty!" && exit 1)

create-release:
  stage: release
  image: alpine:3.22.1
  only: [tags]
  needs: [generate_release_notes]
  before_script:
    - apk add --no-cache bash curl jq
  script:
    - RELEASE_NOTES=$(cat release.md)
    - |
      curl --silent --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request POST \
        --form "name=Release $CI_COMMIT_TAG" \
        --form "tag_name=$CI_COMMIT_TAG" \
        --form "description=$RELEASE_NOTES" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases" || echo "Release might already exist"
    - |
      DOCKER_IMAGE_LINK="https://hub.docker.com/r/$DOCKER_IMAGE/tags?page=1&name=$CI_COMMIT_TAG"
      curl --silent --fail --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --request POST \
        --header "Content-Type: application/json" \
        --data "{\"name\":\"Docker Image $CI_COMMIT_TAG\",\"url\":\"$DOCKER_IMAGE_LINK\",\"link_type\":\"other\"}" \
        "$CI_API_V4_URL/projects/$CI_PROJECT_ID/releases/$CI_COMMIT_TAG/assets/links"

update-release-badge:
  artifacts:
    paths: 
      - release.md
      - assets/badge-release-generic.svg
      - scripts/
  stage: release
  image: alpine:3.22.1
  only: [tags]
  needs: [create-release, generate_release_notes]
  script: |
    set -e
    apk add --no-cache curl jq bash coreutils
    JOB_STATUSES=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" "$CI_API_V4_URL/projects/$CI_PROJECT_ID/pipelines/$CI_PIPELINE_ID/jobs" | jq -r '.[].status')
    ALL_SUCCESS=true
    ANY_FAILED=false
    for status in $JOB_STATUSES; do
      case "$status" in
        failed) ANY_FAILED=true; ALL_SUCCESS=false;;
        running|pending) ALL_SUCCESS=false;;
      esac
    done
    if [ "$ALL_SUCCESS" = true ]; then
      STATUS="passed"; COLOR="#4c1"
    elif [ "$ANY_FAILED" = true ]; then
      STATUS="failed"; COLOR="#e05d44"
    else
      STATUS="running"; COLOR="#dfb317"
    fi
    sed -e "s|{{COLOR}}|$COLOR|g" -e "s|{{STATUS}}|$STATUS|g" "assets/badge-release-generic.svg" > "$BADGE_RELEASE_STATS_OUT"
    CONTENT_BASE64=$(base64 -w 0 "$BADGE_RELEASE_STATS_OUT")
    ENCODED_FILE_PATH=$(echo "$BADGE_RELEASE_STATS_OUT" | sed 's/\//%2F/g')
    curl --request PUT --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      --header "Content-Type: application/json" \
      --data "{
        \"branch\": \"main\",
        \"content\": \"$CONTENT_BASE64\",
        \"commit_message\": \"Update release badge for $CI_COMMIT_TAG\",
        \"encoding\": \"base64\"
      }" \
      "$CI_API_V4_URL/projects/$CI_PROJECT_ID/repository/files/$ENCODED_FILE_PATH"